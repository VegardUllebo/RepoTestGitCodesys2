{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)5ab776b4-ea77-4b19-8803-ba91486a738e","ParentGuid":"(Guid)7d694963-c4d1-4352-8594-a20401544c44","Name":"(string)MB","Properties":{"@Type":"2c41fa04:IDictionary","@Value":{}},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\n// INPUTS\n\n// 1) X Binary input Normal FUNCTION input Binary input signal FROM process.\n// 2) XF Binary input External fault Fault indication from outside the template.\n// 3) RX Binary input Reset latched output Resets the output Y when RX goes high.\n// 4) FB Binary input Force blocking If FB is true, Y is set to 0.\n// 5) FU Binary input Force suppression. If FU is true, Y is set to 0, YF is set to 0 and OS alarm is set to 0.\n\n// OUTPUTS\n\n// 1) Y Binary output Normal FUNCTION output IF the template is set NOT TO latch, Y = X\n//\t\tIF the template is set TO latch, Y is set when X goes high, AND\n//\t\treset when RX goes high.\n//\t\tSubjected to blocking and suppression.\n//\t\tIt shall be possible to generate a warning or action alarm on\n//\t\tthis output. In these cases the letter W (warning) or A\n//\t\t(action) shall be used as the terminal name on the SCD\n//\t\tdiagram.\n// 2) YF Binary output Function failed YF = 1 if XF = 1 or if an internal error has been detected in the template.\n//\t\tSubjected to suppression.\n// 3) BB Binary output Status blocked True if the template is in blocked mode (FB = 1 or Blocking set from OS).\n// 4) BU Binary output Status suppressed True if template is in suppress mode (FU = 1 or Suppression sett from OS).\n// 5) BX Binary output Status function input BX = X\n\n\n\n// Start of program\n//---------------------------------------------------------------------------------------//\n\n// Populate/Initialize temporaries\n\ntbx \t\t\t:= X;\ntbXF \t\t\t:= XF;\ntbRX \t\t\t:= RX;\ntbFB \t\t\t:= FB;\ntbFU \t\t\t:= FU;\n\n// FROM OS (Added if functonality is wanted in operating station)\n// OS_XB :=\n// OS_FU :=\n// OS_RX :=\n\n// Initialize two timers to handle delays on alarms and on output\n// PLC internal clock is retrived using internal TIME function\nttNow_Y \t\t\t\t:= TIME();\nttNow_YF \t\t\t\t:= TIME();\n\n// Timers are started \nttTime_Y \t\t\t\t:= ttNow_Y - stTime_Y;\nttTime_YF \t\t\t\t:= ttNow_YF - stTime_YF;\n\n// Handle parameter inverted\nIF PI THEN\n    tbx \t\t\t\t:= NOT tbx;\nEND_IF;\n\n// Both timers are reset when their respective values changed from it previous state (both flanks)\nIF (sbxmemory = NOT tbx) THEN\n\tstTime_Y \t\t\t:= ttNow_Y;\nEND_IF\n\nIF (sbXF = NOT tbXF) THEN\n\tstTime_YF \t\t\t:= ttNow_YF;\nEND_IF\n\n// Mode Not latched\nIF PL = FALSE THEN\n\n    // Handle Force Supression\n    IF tbFU OR OS_FU THEN\n        tbBU \t\t\t:= TRUE;\n        tbYmemory \t\t:= FALSE;\n        tbYFmemory \t\t:= FALSE;\n        // OS status\n    ELSE\n        tbBU \t\t\t:= FALSE;\n    END_IF;\n    \n    // Handle Force block\n    IF tbFB OR OS_FB THEN\n        tbBB \t\t\t:= TRUE;\n        tbYmemory \t\t:= FALSE;\n\tELSE\n\t\ttbBB \t\t\t:= FALSE;\n    END_IF;\n\n\n    // Handle Fault\n    IF (tbXF OR internal_error) AND NOT tbFU THEN\n        tbYFmemory \t\t:= TRUE;\n    ELSE\n        tbYFmemory \t\t:= FALSE;\n    END_IF;\n\n    // Output subject to blocking and supression\n    IF tbFB OR tbFU OR OS_FB OR OS_FU THEN\n        tbYmemory \t\t:= FALSE;\t\t\n    ELSE\n\t\ttbYmemory \t\t:= tbx;\n    END_IF;\n\t\n    tbBX \t\t\t\t:= tbX;\n\nEND_IF\n\n// Mode latched\nIF PL = TRUE THEN\n \n    // Handle Force Supression\n    IF tbFU OR OS_FU THEN\n        tbBU \t\t\t:= TRUE;\n        tbYmemory \t\t:= FALSE;\n        tbYFmemory \t\t:= FALSE;\n        L_Y \t\t\t:= FALSE;\n    ELSE\n        tbBU \t\t\t:= FALSE;\n    END_IF;\n\n    // Handle Force block\n    IF tbFB OR OS_FB THEN\n        tbBB \t\t\t:= TRUE;\n        tbYmemory \t\t:= FALSE;\n\tELSE\n\t\ttbBB \t\t\t:= FALSE;\n    END_IF;\n\n    // Handle Fault\n    IF (tbXF OR internal_error) AND NOT tbFU THEN\n        tbYFmemory \t\t:= TRUE;\n\t\tL_Y \t\t\t:= TRUE;\n    ELSE\n        tbYFmemory \t\t:= FALSE;\n    END_IF;\n\n    // Posetiv edge on Y\n    IF tbX AND NOT sbX THEN\n\t\ttbYmemory \t\t:= tbx;\n\t\tL_Y \t\t\t:= tbx;\t\t\n    END_IF;\n    \n    IF tbRX OR OS_RX THEN\n        tbYmemory \t\t:= FALSE;\n\t\tL_Y \t\t\t:= FALSE;\n    END_IF;\n    \n    // BX always equal to input X\n    tbBX \t\t\t\t:= tbX;\n\n    // Reset posetiv edge\n    sbx \t\t\t\t:= tbX;\nEND_IF;\n\n\n\n// Handling timers and reset of variables\n// Values are set when timer is reached\nIF (ttTime_Y >= PT_delay) THEN\n\ttbY \t\t\t\t:= tbYmemory;\nEND_IF\n\nIF (ttTime_YF >= PT_delay) THEN\n\ttbYF \t\t\t\t:= tbYFmemory;\nEND_IF\n\n// Values are reset when going from ON -> OFF\nIF NOT tbYmemory THEN\ntbY \t\t\t\t\t:= tbYmemory;\nEND_IF\n\t\nIF NOT tbYFmemory THEN\ntbYF \t\t\t\t\t:= tbYFmemory;\nEND_IF\n\t\n// Both timers are reset if they reach above PT_delay\nIF ttTime_Y > PT_delay THEN\n\tstTime_Y \t\t\t:= ttNow_Y;\nEND_IF\n\nIF ttTime_YF > PT_delay THEN\n\tsttime_YF \t\t\t:= ttNow_YF;\nEND_IF\n\n// Static variables to carry to next iteration.\nsbXmemory \t\t\t\t:= tbX;\nsbXF \t\t\t\t\t:= tbXF;\n\n// TO OS (Added if functonality is wanted in operating system)\n//OS_L_Y  \t\t\t\t\t:= L_Y;\n//OS_YF \t\t\t\t\t:= tbYF;\n//OS_BB \t\t\t\t\t:= tbBB;\n//OS_BU \t\t\t\t\t:= tbBU;\n\n// Writing to outputs\nY  \t\t\t\t\t\t:= tbY;\nYF \t\t\t\t\t\t:= tbYF;\nBB \t\t\t\t\t\t:= tbBB;\nBU \t\t\t\t\t\t:= tbBU;\nBX \t\t\t\t\t\t:= X;\n","LineInfoPersistence":"(string)5ab776b4-ea77-4b19-8803-ba91486a738e_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION_BLOCK MB\nVAR_INPUT\n\t// Normal function input\n\t{Binary input signal from process}\n\tX: BOOL;\n\t// External Fault\n\t{Fault indication from outside the template}\n\tXF: BOOL;\n\t// Reset latched output\n\t{Resets the output Y when RX goes high.}\n\tRX: BOOL;\n\t// Force blocking\n\t{FB is true, Y is set to 0.}\n\tFB: BOOL;\n\n\n\t// Force suppression\n\t{FU is true, Y is set to 0, YF is set to 0 and OS alarm is set to 0.}\n\tFU: BOOL;\nEND_VAR\nVAR_OUTPUT\n\t// Normal function output\n\t{Not latching Y = X}\n\t{Latch, Y is set when X goes high and reset when RX goes high}\n\t{Subjected to blocking and suppression}\n\tY: BOOL;\n\t// Function failed\n\t{YF = 1 if XF = 1 or if an internal error has been detected in}\n\t{the template.}\n\t{Subjected to suppression.}\n\tYF: BOOL;\n\t// Status blocked\n\t{True if the template is in blocked mode (FB = 1 or Blocking set from OS).}\n\tBB: BOOL;\n\t// Status suppressed\n\t{True if template is in suppress mode (FU = 1 or Suppression sett from OS).}\n\tBU: BOOL;\n\t// Status function input\n\t{BX = X}\n\tBX: BOOL;\nEND_VAR\n\nVAR_STAT RETAIN\n    // Parameter invert input\n\t{the parameter is set the X input is inverted.}\n\tPI: BOOL := FALSE;\n    // Parameter latched output\n\t{the parameter is set the Y output is latched.}\n\tPL: BOOL := FALSE;\n\t// Parameter time telay alarm\n\t{Delay before alarm is raised and Y output is set}\n\t{after X input goes high.}\n\tPT_delay: TIME := T#0S;\n\t\n\t// Saved Latched output\n\tL_Y : BOOL;\n\t\n\t// Operator station blocking on/off\n\tOS_FB: BOOL;\n\t// Operator station suppression on/off\n\tOS_FU: BOOL;\n\t// Reset Latched output\n\tOS_RX: BOOL;\n\t\nEND_VAR\n\nVAR_STAT\n\t// Posetive edge memory\n\tsbX : BOOL;\n\t// Reset timer memory\n\tsbXmemory : BOOL;\n\t// Posetive edge memory\n\tsbXF : BOOL;\n\t\n\t// Timer\n\tstTime_Y : TIME;\n\t// Timer\n\tstTime_YF : TIME;\n\t\n\t// Operator staton output (blocked)\n\tOS_BB : BOOL;\n\t// Operator station output (Supressed)\n\tOS_BU : BOOL;\n\t// Operator station  output (latched value)\n\tOS_L_Y : BOOL;\n\t// Operator station (Alarms)\n\tOS_YF : BOOL;\nEND_VAR\n\nVAR\n\n\ttbX: BOOL;\n\ttbXF: BOOL;\n\ttbRX: BOOL;\n\ttbFB: BOOL;\n\ttbFU: BOOL;\n\t\n\ttbY: BOOL;\n\ttbYF: BOOL;\n\ttbBB: BOOL;\n\ttbBU: BOOL;\n\ttbBX: BOOL;\n\t\n\ttbYmemory: BOOL;\n\ttbYFmemory: BOOL;\n\tinternal_error: BOOL;\n\t\n\tttNow_Y: TIME;\n\tttTime_Y: TIME;\n\tttNow_YF: TIME;\n\tttTime_YF: TIME;\nEND_VAR\n","LineInfoPersistence":"(string)5ab776b4-ea77-4b19-8803-ba91486a738e_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)320","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}